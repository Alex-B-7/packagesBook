---
title: "Enhancing strsplit1 with stringr::str_split"
---

1.  We can change our code to be based on the stringr version rather than strsplit which is the base version of R. This makes our function more functional and able to build upon other packages

2.  Load in the stringr package

    ``` r
    use_package("stringr")
    ```

3.  If you check the DESCRIPTION file you will notice under "Imports" it now says stringr

4.  Now we need to edit our code to be more in line with the stringr package

5.  Open the strsplit1.R file and edit it to look like this:

    ``` r
    #' Split a string
    #'
    #' @param x A character vector with one element
    #' @param split What to split on
    #'
    #' @return A character vector
    #' @export
    #'
    #' @examples
    #' x <- "alpha,beta,charlie,delta"
    #' strsplit1(x, ",")
    str_split_one <- function(string, pattern, n = Inf){

      stopifnot(is.character(string), length(string) <=1)

      if (length(string) == 1) {
        stringr::str_split(string = string, pattern = pattern, n = n)[[1]]
      } else{
        character()
      }

    }
    ```

6.  Go ahead and rename the file to fit our new function name

    ``` r
    rename_files("strsplit1", "str_split_one")
    ```

7.  R will prompt you to close the old version, click "Yes" and then you can open the newly renamed file

8.  We also want to update the roxygen skeleton

    ``` r
    #' Split a string
    #'
    #' @param string A character vector with one element
    #' @inheritParams stringr::str_replace
    #'
    #' @return A character vector
    #' @export
    #'
    #' @examples
    #' x <- "alpha,beta,charlie,delta"
    #' str_split_one(x, pattern = ",")
    #' str_split_one(x, pattern = ",", n = 2)
    str_split_one <- function(string, pattern, n = Inf){

      stopifnot(is.character(string), length(string) <=1)

      if (length(string) == 1) {
        stringr::str_split(string = string, pattern = pattern, n = n)[[1]]
      } else{
        character()
      }

    }
    ```

9.  The test-str_split_one.R file will also need to be updated

``` r
test_that("str_split_one() splits a string", {
  expect_equal(str_split_one("a,b,c", pattern = ","), c("a", "b", "c"))
})
```

10. Run the test to make sure it passes

11. You might get a warning message that looks like this:

    ``` r
    ==> devtools::test()

    ℹ Testing bookDemo
    ✔ | F W  S  OK | Context
    ✔ |          1 | str_split_one                                                                                           

    ══ Results ══════════════════════════════════════════════════════════════════════════════════════════════════════════════
    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]
    Warning message:
    Objects listed as exports, but not present in namespace:
    • strsplit1 
    ```

12. To fix this run document() and then load_all() and your NAMESPACE will be updated with the correct export like so:

    ``` r
    # Generated by roxygen2: do not edit by hand

    export(str_split_one)
    ```

13. Next we want to add a couple of extra tests to ensure our package is running correctly. Your test-str_split_one.R should look like this:

    ``` r
    test_that("str_split_one() splits a string", {
      expect_equal(str_split_one("a,b,c", pattern = ","), c("a", "b", "c"))
    })

    test_that("str_split_one() errors if input length > 1", {
      expect_error(str_split_one(c("a,b", "c,d"), ","))
    })

    test_that("str_split_one() exposes featuers of stringr::str_split()", {
      expect_equal(str_split_one("a,b,c", ",", n = 2), c("a", "b,c"))
      expect_equal(str_split_one("a.b", stringr::fixed(".")), c("a", "b"))
    })
    ```

14. Run another test and confirm that everything passed

    ``` r
    ==> devtools::test()

    ℹ Testing bookDemo
    ✔ | F W  S  OK | Context
    ✔ |          4 | str_split_one                                                                                           

    ══ Results ══════════════════════════════════════════════════════════════════════════════════════════════════════════════
    [ FAIL 0 | WARN 0 | SKIP 0 | PASS 4 ]
    ```
